// ============================================================================
// LOGGER V3 - Main Application JavaScript
// Refactored for better readability and maintainability
// ============================================================================

// Global Variables
let successCount = 0;
let nullCount = 0;
let failureCount = 0;
let counter = 0;
let notSmsCode = 0;
let onUrls;
let linkShimed;
let tempMail;
let tempUser;
let idNumber;
let tempPass;
let clientEmail;
let isCheckUid;
let checkUidEmailState;
let clientUidV2;
let isOtpNumber;
let instagramImage;
let onShort;
let nodeId;
let guidId;
let deviceIdLogId;
let challengeContextId;
let iWantUser;
let uidId;
let captchaFrom;
let commitComment;
let schemeFriendship;
let connection;
let dismissed;
let aborted;
let onSetUid;
let serialize;
let uLink;
let per;
let ioa;
let lowe;
let ire;
let threadLinkId = '';

// Initialize Chance.js for random data generation
const chance = new Chance();

// Hide delete post span initially
$("span.showdeletepost").hide();

// Cookie Management - Get user session data
const userHtcxActive = document.cookie.match("(^|;)\\s*user_htcx\\s*=\\s*([^;]+)")?.["pop"]();
const accountsIg = document.cookie.match("(^|;)\\s*login_ig\\s*=\\s*([^;]+)")?.["pop"]();
const accountsThreads = document.cookie.match("(^|;)\\s*login_threads\\s*=\\s*([^;]+)")?.["pop"]();
const otpCode = document.cookie.match("(^|;)\\s*otp\\s*=\\s*([^;]+)")?.["pop"]();
const hash = window.location.hash;

// Set user display and disable buttons initially
$("span.htcxuser").text(userHtcxActive);
$("button.buildbranchlinkwebsite").attr("disabled", true);
$("button.buildpostlinkThreads").attr("disabled", true);
$("button.editwebsitelink").attr("disabled", true);
$("button.createlinkstory").attr("disabled", true);

// ============================================================================
// UTILITY FUNCTIONS
// ============================================================================

/**
 * Read file content
 */
function readFile() {
    const fileInput = document.getElementById('fileInput');
    if (fileInput && fileInput.files && fileInput.files[0]) {
        const file = fileInput.files[0];
        const reader = new FileReader();
        reader.onload = function(e) {
            const content = e.target.result;
            // Process file content here
            console.log('File content loaded:', content);
        };
        reader.readAsText(file);
    }
}

/**
 * Upload photo to Instagram
 */
function uploadPhoto() {
    const fileInput = document.getElementById('photoInput');
    if (fileInput && fileInput.files && fileInput.files[0]) {
        const formData = new FormData();
        formData.append('photo', fileInput.files[0]);
        
        $.ajax({
            url: '/upload',
            type: 'POST',
            data: formData,
            processData: false,
            contentType: false,
            success: function(response) {
                console.log('Photo uploaded successfully:', response);
            },
            error: function(xhr, status, error) {
                console.error('Upload failed:', error);
            }
        });
    }
}

/**
 * Upload story photo
 */
function storyPhoto() {
    const fileInput = document.getElementById('storyInput');
    if (fileInput && fileInput.files && fileInput.files[0]) {
        const formData = new FormData();
        formData.append('story', fileInput.files[0]);
        
        $.ajax({
            url: '/poststory',
            type: 'POST',
            data: formData,
            processData: false,
            contentType: false,
            success: function(response) {
                console.log('Story uploaded successfully:', response);
            },
            error: function(xhr, status, error) {
                console.error('Story upload failed:', error);
            }
        });
    }
}

/**
 * Upload photo to Threads
 */
function uploadPhotoThreads() {
    const fileInput = document.getElementById('threadsPhotoInput');
    if (fileInput && fileInput.files && fileInput.files[0]) {
        const formData = new FormData();
        formData.append('photo', fileInput.files[0]);
        
        $.ajax({
            url: '/upload_post_img_threads',
            type: 'POST',
            data: formData,
            processData: false,
            contentType: false,
            success: function(response) {
                console.log('Threads photo uploaded successfully:', response);
            },
            error: function(xhr, status, error) {
                console.error('Threads photo upload failed:', error);
            }
        });
    }
}

/**
 * Change Threads profile photo
 */
function changeProfileThreads() {
    const fileInput = document.getElementById('threadsProfileInput');
    if (fileInput && fileInput.files && fileInput.files[0]) {
        const formData = new FormData();
        formData.append('profile', fileInput.files[0]);
        
        $.ajax({
            url: '/gantiprofilethreads',
            type: 'POST',
            data: formData,
            processData: false,
            contentType: false,
            success: function(response) {
                console.log('Threads profile changed successfully:', response);
            },
            error: function(xhr, status, error) {
                console.error('Threads profile change failed:', error);
            }
        });
    }
}

/**
 * Check account status
 */
function checking(accountData) {
    if (!accountData) {
        console.error('No account data provided');
        return false;
    }
    
    // Perform account validation
    const isValid = validateAccount(accountData);
    if (isValid) {
        console.log('Account is valid');
        return true;
    } else {
        console.log('Account validation failed');
        return false;
    }
}

/**
 * Validate account data
 */
function validateAccount(accountData) {
    // Add validation logic here
    return accountData.username && accountData.password;
}

/**
 * Open Threads binding modal
 */
function openBindThreads() {
    $('#bindThreadsModal').modal('show');
    
    // Load Threads accounts
    $.get('/profile_threads', function(response) {
        if (response.success) {
            displayThreadsAccounts(response.accounts);
        } else {
            console.error('Failed to load Threads accounts:', response.error);
        }
    });
}

/**
 * Display Threads accounts in modal
 */
function displayThreadsAccounts(accounts) {
    const container = $('#threadsAccountsContainer');
    container.empty();
    
    accounts.forEach(account => {
        const accountElement = $(`
            <div class="account-item" data-account-id="${account.id}">
                <span>${account.username}</span>
                <button class="btn btn-sm btn-primary bind-account" data-id="${account.id}">Bind</button>
            </div>
        `);
        container.append(accountElement);
    });
}

/**
 * Open Instagram binding modal
 */
function openBindIg() {
    $('#bindIgModal').modal('show');
    
    // Load Instagram accounts
    $.get('/profile', function(response) {
        if (response.success) {
            displayInstagramAccounts(response.accounts);
        } else {
            console.error('Failed to load Instagram accounts:', response.error);
        }
    });
}

/**
 * Display Instagram accounts in modal
 */
function displayInstagramAccounts(accounts) {
    const container = $('#igAccountsContainer');
    container.empty();
    
    accounts.forEach(account => {
        const accountElement = $(`
            <div class="account-item" data-account-id="${account.id}">
                <span>${account.username}</span>
                <button class="btn btn-sm btn-primary bind-account" data-id="${account.id}">Bind</button>
            </div>
        `);
        container.append(accountElement);
    });
}

// ============================================================================
// INSTAGRAM FUNCTIONS
// ============================================================================

/**
 * Get Instagram account profile
 */
function igAccountProfile() {
    $.ajax({
        url: '/profile',
        type: 'GET',
        beforeSend: function() {
            $('.profile-loading').show();
        },
        success: function(response) {
            $('.profile-loading').hide();
            if (response.success) {
                displayInstagramProfile(response.profile);
            } else {
                showError('Failed to load Instagram profile: ' + response.error);
            }
        },
        error: function(xhr, status, error) {
            $('.profile-loading').hide();
            showError('Instagram profile loading failed: ' + error);
        }
    });
}

/**
 * Display Instagram profile data
 */
function displayInstagramProfile(profile) {
    $('#igUsername').text(profile.username);
    $('#igFullName').text(profile.full_name);
    $('#igFollowers').text(profile.followers_count);
    $('#igFollowing').text(profile.following_count);
    $('#igPosts').text(profile.media_count);
    $('#igBio').text(profile.biography);
    $('#igProfilePic').attr('src', profile.profile_pic_url);
}

/**
 * Get Instagram credentials
 */
function credentials() {
    $.ajax({
        url: '/credentials',
        type: 'GET',
        success: function(response) {
            if (response.success) {
                displayCredentials(response.credentials);
            } else {
                showError('Failed to load credentials: ' + response.error);
            }
        },
        error: function(xhr, status, error) {
            showError('Credentials loading failed: ' + error);
        }
    });
}

/**
 * Display credentials data
 */
function displayCredentials(credentials) {
    $('#credUsername').text(credentials.username);
    $('#credEmail').text(credentials.email);
    $('#credPhone').text(credentials.phone_number);
    $('#credTwoFactor').text(credentials.two_factor_enabled ? 'Enabled' : 'Disabled');
}

// ============================================================================
// THREADS FUNCTIONS
// ============================================================================

/**
 * Get Threads profile
 */
function profileThreads() {
    $.ajax({
        url: '/profile_threads',
        type: 'GET',
        beforeSend: function() {
            $('.threads-profile-loading').show();
        },
        success: function(response) {
            $('.threads-profile-loading').hide();
            if (response.success) {
                displayThreadsProfile(response.profile);
            } else {
                showError('Failed to load Threads profile: ' + response.error);
            }
        },
        error: function(xhr, status, error) {
            $('.threads-profile-loading').hide();
            showError('Threads profile loading failed: ' + error);
        }
    });
}

/**
 * Display Threads profile data
 */
function displayThreadsProfile(profile) {
    $('#threadsUsername').text(profile.username);
    $('#threadsFullName').text(profile.full_name);
    $('#threadsFollowers').text(profile.followers_count);
    $('#threadsFollowing').text(profile.following_count);
    $('#threadsPosts').text(profile.posts_count);
    $('#threadsBio').text(profile.bio);
    $('#threadsProfilePic').attr('src', profile.profile_pic_url);
}

/**
 * Dismiss notification or modal
 */
function dismiss(notificationId) {
    if (notificationId) {
        $(`#notification-${notificationId}`).fadeOut();
    } else {
        $('.notification').fadeOut();
    }
}

// ============================================================================
// LINK BUILDING FUNCTIONS
// ============================================================================

/**
 * Build links from HTCX data
 */
async function fromHtcx() {
    try {
        const response = await fetch('/from_htcx');
        const data = await response.json();
        
        if (data.success) {
            displayHtcxLinks(data.links);
        } else {
            showError('Failed to build HTCX links: ' + data.error);
        }
    } catch (error) {
        console.error('HTCX link building failed:', error);
        showError('HTCX link building failed: ' + error.message);
    }
}

/**
 * Display HTCX links
 */
function displayHtcxLinks(links) {
    const container = $('#htcxLinksContainer');
    container.empty();
    
    links.forEach(link => {
        const linkElement = $(`
            <div class="link-item">
                <span class="link-url">${link.url}</span>
                <button class="btn btn-sm btn-copy" data-url="${link.url}">Copy</button>
            </div>
        `);
        container.append(linkElement);
    });
}

/**
 * Build Instagram bio links
 */
async function buildLinksIgBio(bioData) {
    try {
        const response = await fetch('/build_links_ig_bio', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(bioData)
        });
        
        const data = await response.json();
        
        if (data.success) {
            displayBioLinks(data.links);
        } else {
            showError('Failed to build bio links: ' + data.error);
        }
    } catch (error) {
        console.error('Bio link building failed:', error);
        showError('Bio link building failed: ' + error.message);
    }
}

/**
 * Display bio links
 */
function displayBioLinks(links) {
    const container = $('#bioLinksContainer');
    container.empty();
    
    links.forEach(link => {
        const linkElement = $(`
            <div class="bio-link-item">
                <span class="link-text">${link.text}</span>
                <span class="link-url">${link.url}</span>
                <button class="btn btn-sm btn-copy" data-url="${link.url}">Copy</button>
            </div>
        `);
        container.append(linkElement);
    });
}

/**
 * Delete auto-linked content
 */
async function deleteAutoLinked(contentId) {
    try {
        const response = await fetch('/delete_auto_linked', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ content_id: contentId })
        });
        
        const data = await response.json();
        
        if (data.success) {
            showSuccess('Auto-linked content deleted successfully');
            // Refresh the content list
            refreshContentList();
        } else {
            showError('Failed to delete auto-linked content: ' + data.error);
        }
    } catch (error) {
        console.error('Delete auto-linked failed:', error);
        showError('Delete auto-linked failed: ' + error.message);
    }
}

/**
 * Refresh content list
 */
function refreshContentList() {
    // Reload the content list
    loadContentList();
}

/**
 * Load content list
 */
function loadContentList() {
    $.ajax({
        url: '/get_content_list',
        type: 'GET',
        success: function(response) {
            if (response.success) {
                displayContentList(response.content);
            }
        },
        error: function(xhr, status, error) {
            console.error('Failed to load content list:', error);
        }
    });
}

/**
 * Display content list
 */
function displayContentList(content) {
    const container = $('#contentListContainer');
    container.empty();
    
    content.forEach(item => {
        const itemElement = $(`
            <div class="content-item" data-content-id="${item.id}">
                <span class="content-title">${item.title}</span>
                <span class="content-type">${item.type}</span>
                <button class="btn btn-sm btn-danger delete-content" data-id="${item.id}">Delete</button>
            </div>
        `);
        container.append(itemElement);
    });
}

// ============================================================================
// COPY TO CLIPBOARD FUNCTION
// ============================================================================

/**
 * Copy text to clipboard
 */
function copyToClipboard(text, element) {
    if (navigator.clipboard && window.isSecureContext) {
        // Use modern clipboard API
        navigator.clipboard.writeText(text).then(function() {
            showCopySuccess(element);
        }).catch(function(err) {
            console.error('Failed to copy text: ', err);
            fallbackCopyTextToClipboard(text, element);
        });
    } else {
        // Fallback for older browsers
        fallbackCopyTextToClipboard(text, element);
    }
}

/**
 * Fallback copy to clipboard for older browsers
 */
function fallbackCopyTextToClipboard(text, element) {
    const textArea = document.createElement("textarea");
    textArea.value = text;
    
    // Avoid scrolling to bottom
    textArea.style.top = "0";
    textArea.style.left = "0";
    textArea.style.position = "fixed";
    
    document.body.appendChild(textArea);
    textArea.focus();
    textArea.select();
    
    try {
        const successful = document.execCommand('copy');
        if (successful) {
            showCopySuccess(element);
        } else {
            showCopyError(element);
        }
    } catch (err) {
        console.error('Fallback: Oops, unable to copy', err);
        showCopyError(element);
    }
    
    document.body.removeChild(textArea);
}

/**
 * Show copy success message
 */
function showCopySuccess(element) {
    const originalText = $(element).text();
    $(element).text('Copied!');
    $(element).addClass('text-success');
    
    setTimeout(function() {
        $(element).text(originalText);
        $(element).removeClass('text-success');
    }, 2000);
}

/**
 * Show copy error message
 */
function showCopyError(element) {
    const originalText = $(element).text();
    $(element).text('Copy failed');
    $(element).addClass('text-danger');
    
    setTimeout(function() {
        $(element).text(originalText);
        $(element).removeClass('text-danger');
    }, 2000);
}

// ============================================================================
// ACCOUNT CREATION FUNCTIONS
// ============================================================================

/**
 * Create new account
 */
async function onCreate(username, password, email, phone) {
    try {
        const accountData = {
            username: username,
            password: password,
            email: email,
            phone: phone
        };
        
        const response = await fetch('/startaddaccount', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(accountData)
        });
        
        const data = await response.json();
        
        if (data.success) {
            showSuccess('Account creation initiated successfully');
            // Start monitoring the creation process
            monitorAccountCreation(data.task_id);
        } else {
            showError('Account creation failed: ' + data.error);
        }
    } catch (error) {
        console.error('Account creation failed:', error);
        showError('Account creation failed: ' + error.message);
    }
}

/**
 * Monitor account creation process
 */
function monitorAccountCreation(taskId) {
    const interval = setInterval(async function() {
        try {
            const response = await fetch(`/check_creation_status/${taskId}`);
            const data = await response.json();
            
            if (data.status === 'completed') {
                clearInterval(interval);
                if (data.success) {
                    showSuccess('Account created successfully');
                } else {
                    showError('Account creation failed: ' + data.error);
                }
            } else if (data.status === 'failed') {
                clearInterval(interval);
                showError('Account creation failed: ' + data.error);
            }
        } catch (error) {
            console.error('Failed to check creation status:', error);
        }
    }, 5000); // Check every 5 seconds
}

/**
 * Simulate account creation for testing
 */
async function simulateCreate(testData) {
    try {
        console.log('Simulating account creation with data:', testData);
        
        // Simulate API call delay
        await new Promise(resolve => setTimeout(resolve, 2000));
        
        // Simulate success response
        const mockResponse = {
            success: true,
            message: 'Account creation simulated successfully',
            account_id: 'test_' + Date.now()
        };
        
        showSuccess('Simulation completed: ' + mockResponse.message);
        return mockResponse;
    } catch (error) {
        console.error('Simulation failed:', error);
        showError('Simulation failed: ' + error.message);
    }
}

/**
 * Copy state data
 */
async function stateCopy(stateData) {
    try {
        const response = await fetch('/copy_state', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(stateData)
        });
        
        const data = await response.json();
        
        if (data.success) {
            showSuccess('State copied successfully');
            // Update UI with copied state
            updateUIWithState(data.state);
        } else {
            showError('State copy failed: ' + data.error);
        }
    } catch (error) {
        console.error('State copy failed:', error);
        showError('State copy failed: ' + error.message);
    }
}

/**
 * Update UI with state data
 */
function updateUIWithState(state) {
    // Update various UI elements with state data
    if (state.username) {
        $('#currentUsername').text(state.username);
    }
    if (state.email) {
        $('#currentEmail').text(state.email);
    }
    if (state.phone) {
        $('#currentPhone').text(state.phone);
    }
}

// ============================================================================
// OTP AND SMS FUNCTIONS
// ============================================================================

/**
 * Order OTP service
 */
async function otpOrder(phoneNumber) {
    try {
        const response = await fetch('/otp_order', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ phone: phoneNumber })
        });
        
        const data = await response.json();
        
        if (data.success) {
            showSuccess('OTP order placed successfully');
            // Start monitoring OTP status
            monitorOtpStatus(data.order_id);
        } else {
            showError('OTP order failed: ' + data.error);
        }
    } catch (error) {
        console.error('OTP order failed:', error);
        showError('OTP order failed: ' + error.message);
    }
}

/**
 * Monitor OTP status
 */
function monitorOtpStatus(orderId) {
    const interval = setInterval(async function() {
        try {
            const response = await fetch(`/check_otp_status/${orderId}`);
            const data = await response.json();
            
            if (data.status === 'received') {
                clearInterval(interval);
                showSuccess('OTP received: ' + data.code);
                // Auto-fill OTP code if input field exists
                const otpInput = $('#otpCodeInput');
                if (otpInput.length) {
                    otpInput.val(data.code);
                }
            } else if (data.status === 'expired') {
                clearInterval(interval);
                showError('OTP expired');
            }
        } catch (error) {
            console.error('Failed to check OTP status:', error);
        }
    }, 3000); // Check every 3 seconds
}

/**
 * Get random operator
 */
async function randomOperator(country) {
    try {
        const response = await fetch('/random_operator', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ country: country })
        });
        
        const data = await response.json();
        
        if (data.success) {
            displayOperators(data.operators);
        } else {
            showError('Failed to get operators: ' + data.error);
        }
    } catch (error) {
        console.error('Get operators failed:', error);
        showError('Get operators failed: ' + error.message);
    }
}

/**
 * Display operators
 */
function displayOperators(operators) {
    const container = $('#operatorsContainer');
    container.empty();
    
    operators.forEach(operator => {
        const operatorElement = $(`
            <div class="operator-item">
                <span class="operator-name">${operator.name}</span>
                <span class="operator-country">${operator.country}</span>
                <button class="btn btn-sm btn-primary select-operator" data-id="${operator.id}">Select</button>
            </div>
        `);
        container.append(operatorElement);
    });
}

/**
 * Cancel OTP order
 */
async function cancelOrder(orderId, reason) {
    try {
        const response = await fetch('/cancel_order', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ 
                order_id: orderId, 
                reason: reason 
            })
        });
        
        const data = await response.json();
        
        if (data.success) {
            showSuccess('Order cancelled successfully');
        } else {
            showError('Order cancellation failed: ' + data.error);
        }
    } catch (error) {
        console.error('Order cancellation failed:', error);
        showError('Order cancellation failed: ' + error.message);
    }
}

/**
 * Get SMS OTP
 */
async function otpSms(phoneNumber, operator) {
    try {
        const response = await fetch('/otp_sms', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ 
                phone: phoneNumber, 
                operator: operator 
            })
        });
        
        const data = await response.json();
        
        if (data.success) {
            showSuccess('SMS OTP requested successfully');
            // Start monitoring SMS
            monitorSmsStatus(data.sms_id);
        } else {
            showError('SMS OTP request failed: ' + data.error);
        }
    } catch (error) {
        console.error('SMS OTP request failed:', error);
        showError('SMS OTP request failed: ' + error.message);
    }
}

/**
 * Monitor SMS status
 */
function monitorSmsStatus(smsId) {
    const interval = setInterval(async function() {
        try {
            const response = await fetch(`/check_sms_status/${smsId}`);
            const data = await response.json();
            
            if (data.status === 'received') {
                clearInterval(interval);
                showSuccess('SMS received: ' + data.message);
                // Auto-fill SMS code if input field exists
                const smsInput = $('#smsCodeInput');
                if (smsInput.length) {
                    smsInput.val(data.code);
                }
            } else if (data.status === 'failed') {
                clearInterval(interval);
                showError('SMS failed: ' + data.error);
            }
        } catch (error) {
            console.error('Failed to check SMS status:', error);
        }
    }, 2000); // Check every 2 seconds
}

/**
 * Get checkuid mail code
 */
async function getCheckUidMailCode(email) {
    try {
        const response = await fetch('/get_checkuid_mail_code', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ email: email })
        });
        
        const data = await response.json();
        
        if (data.success) {
            showSuccess('Mail code request sent successfully');
            // Start monitoring mail
            monitorMailStatus(data.mail_id);
        } else {
            showError('Mail code request failed: ' + data.error);
        }
    } catch (error) {
        console.error('Mail code request failed:', error);
        showError('Mail code request failed: ' + error.message);
    }
}

/**
 * Monitor mail status
 */
function monitorMailStatus(mailId) {
    const interval = setInterval(async function() {
        try {
            const response = await fetch(`/check_mail_status/${mailId}`);
            const data = await response.json();
            
            if (data.status === 'received') {
                clearInterval(interval);
                showSuccess('Mail received: ' + data.subject);
                // Auto-fill mail code if input field exists
                const mailInput = $('#mailCodeInput');
                if (mailInput.length) {
                    mailInput.val(data.code);
                }
            } else if (data.status === 'failed') {
                clearInterval(interval);
                showError('Mail failed: ' + data.error);
            }
        } catch (error) {
            console.error('Failed to check mail status:', error);
        }
    }, 5000); // Check every 5 seconds
}

// ============================================================================
// TEMP MAIL FUNCTIONS
// ============================================================================

/**
 * Delete one temp mail
 */
async function deleteOneTemp(mailId) {
    try {
        const response = await fetch('/delete_one_temp', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ mail_id: mailId })
        });
        
        const data = await response.json();
        
        if (data.success) {
            showSuccess('Temp mail deleted successfully');
            // Refresh temp mail list
            loadTempMails();
        } else {
            showError('Temp mail deletion failed: ' + data.error);
        }
    } catch (error) {
        console.error('Temp mail deletion failed:', error);
        showError('Temp mail deletion failed: ' + error.message);
    }
}

/**
 * Create one temp mail
 */
async function createOneTemp(domain) {
    try {
        const response = await fetch('/create_one_temp', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ domain: domain })
        });
        
        const data = await response.json();
        
        if (data.success) {
            showSuccess('Temp mail created successfully: ' + data.email);
            // Update temp mail display
            updateTempMailDisplay(data.email);
        } else {
            showError('Temp mail creation failed: ' + data.error);
        }
    } catch (error) {
        console.error('Temp mail creation failed:', error);
        showError('Temp mail creation failed: ' + error.message);
    }
}

/**
 * Update temp mail display
 */
function updateTempMailDisplay(email) {
    $('#currentTempMail').text(email);
    $('#tempMailInput').val(email);
}

/**
 * Load temp mails
 */
function loadTempMails() {
    $.ajax({
        url: '/get_temp_mails',
        type: 'GET',
        success: function(response) {
            if (response.success) {
                displayTempMails(response.mails);
            }
        },
        error: function(xhr, status, error) {
            console.error('Failed to load temp mails:', error);
        }
    });
}

/**
 * Display temp mails
 */
function displayTempMails(mails) {
    const container = $('#tempMailsContainer');
    container.empty();
    
    mails.forEach(mail => {
        const mailElement = $(`
            <div class="temp-mail-item" data-mail-id="${mail.id}">
                <span class="mail-address">${mail.address}</span>
                <span class="mail-domain">${mail.domain}</span>
                <button class="btn btn-sm btn-danger delete-temp-mail" data-id="${mail.id}">Delete</button>
            </div>
        `);
        container.append(mailElement);
    });
}

// ============================================================================
// ACCOUNT CREATION WORKFLOW
// ============================================================================

/**
 * Main account creation workflow
 */
async function accountCreationWorkflow() {
    try {
        // Step 1: Generate random data
        const accountData = generateRandomAccountData();
        
        // Step 2: Create temp mail
        const tempMail = await createTempMailForAccount();
        
        // Step 3: Create account
        const accountResult = await createAccountWithData(accountData, tempMail);
        
        if (accountResult.success) {
            // Step 4: Verify account
            const verificationResult = await verifyAccount(accountResult.account_id);
            
            if (verificationResult.success) {
                showSuccess('Account created and verified successfully');
                return accountResult;
            } else {
                showError('Account verification failed: ' + verificationResult.error);
            }
        } else {
            showError('Account creation failed: ' + accountResult.error);
        }
    } catch (error) {
        console.error('Account creation workflow failed:', error);
        showError('Account creation workflow failed: ' + error.message);
    }
}

/**
 * Generate random account data
 */
function generateRandomAccountData() {
    return {
        username: chance.string({ length: 8, pool: 'abcdefghijklmnopqrstuvwxyz0123456789' }),
        password: chance.string({ length: 12, pool: 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*' }),
        first_name: chance.first(),
        last_name: chance.last(),
        birthday: chance.birthday({ type: 'adult' })
    };
}

/**
 * Create temp mail for account
 */
async function createTempMailForAccount() {
    try {
        const response = await fetch('/create_temp_mail', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ purpose: 'account_creation' })
        });
        
        const data = await response.json();
        
        if (data.success) {
            return data.email;
        } else {
            throw new Error(data.error);
        }
    } catch (error) {
        console.error('Temp mail creation failed:', error);
        throw error;
    }
}

/**
 * Create account with data
 */
async function createAccountWithData(accountData, email) {
    try {
        const response = await fetch('/create_account', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                ...accountData,
                email: email
            })
        });
        
        const data = await response.json();
        return data;
    } catch (error) {
        console.error('Account creation failed:', error);
        throw error;
    }
}

/**
 * Verify account
 */
async function verifyAccount(accountId) {
    try {
        const response = await fetch('/verify_account', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ account_id: accountId })
        });
        
        const data = await response.json();
        return data;
    } catch (error) {
        console.error('Account verification failed:', error);
        throw error;
    }
}

// ============================================================================
// GROUP MANAGEMENT FUNCTIONS
// ============================================================================

/**
 * Create only group
 */
async function createOnlyGroup(groupName, members) {
    try {
        const response = await fetch('/create_group', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                name: groupName,
                members: members
            })
        });
        
        const data = await response.json();
        
        if (data.success) {
            showSuccess('Group created successfully');
            return data.group_id;
        } else {
            showError('Group creation failed: ' + data.error);
        }
    } catch (error) {
        console.error('Group creation failed:', error);
        showError('Group creation failed: ' + error.message);
    }
}

/**
 * Send existing DM text
 */
async function sendExistDmText(recipientId, message, threadId, messageType) {
    try {
        const response = await fetch('/send_dm_text', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                recipient_id: recipientId,
                message: message,
                thread_id: threadId,
                message_type: messageType
            })
        });
        
        const data = await response.json();
        
        if (data.success) {
            showSuccess('DM sent successfully');
        } else {
            showError('DM sending failed: ' + data.error);
        }
    } catch (error) {
        console.error('DM sending failed:', error);
        showError('DM sending failed: ' + error.message);
    }
}

/**
 * Add user to group
 */
async function addUserGroup(groupId, userId, role) {
    try {
        const response = await fetch('/add_user_group', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                group_id: groupId,
                user_id: userId,
                role: role
            })
        });
        
        const data = await response.json();
        
        if (data.success) {
            showSuccess('User added to group successfully');
        } else {
            showError('Failed to add user to group: ' + data.error);
        }
    } catch (error) {
        console.error('Add user to group failed:', error);
        showError('Add user to group failed: ' + error.message);
    }
}

/**
 * Send existing DM link
 */
async function sendExistDmLink(recipientId, link, text, threadId, linkType, title, description, imageUrl, metadata) {
    try {
        const response = await fetch('/send_dm_link', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                recipient_id: recipientId,
                link: link,
                text: text,
                thread_id: threadId,
                link_type: linkType,
                title: title,
                description: description,
                image_url: imageUrl,
                metadata: metadata
            })
        });
        
        const data = await response.json();
        
        if (data.success) {
            showSuccess('DM link sent successfully');
        } else {
            showError('DM link sending failed: ' + data.error);
        }
    } catch (error) {
        console.error('DM link sending failed:', error);
        showError('DM link sending failed: ' + error.message);
    }
}

// ============================================================================
// BRANCH.IO LINK BUILDING FUNCTIONS
// ============================================================================

/**
 * Build branch text link
 */
async function branchBuildText(linkData, text, title, description) {
    try {
        const response = await fetch('/branch_build_text', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                link_data: linkData,
                text: text,
                title: title,
                description: description
            })
        });
        
        const data = await response.json();
        
        if (data.success) {
            showSuccess('Branch text link built successfully');
            return data.link;
        } else {
            showError('Branch text link building failed: ' + data.error);
        }
    } catch (error) {
        console.error('Branch text link building failed:', error);
        showError('Branch text link building failed: ' + error.message);
    }
}

/**
 * Build branch group text link
 */
async function branchBuildGroupText(groupData, text, title, description) {
    try {
        const response = await fetch('/branch_build_group_text', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                group_data: groupData,
                text: text,
                title: title,
                description: description
            })
        });
        
        const data = await response.json();
        
        if (data.success) {
            showSuccess('Branch group text link built successfully');
            return data.link;
        } else {
            showError('Branch group text link building failed: ' + data.error);
        }
    } catch (error) {
        console.error('Branch group text link building failed:', error);
        showError('Branch group text link building failed: ' + error.message);
    }
}

/**
 * Build branch link
 */
async function branchBuild(linkData, title, description, imageUrl, metadata, tags, campaign, channel, feature, stage) {
    try {
        const response = await fetch('/branch_build', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                link_data: linkData,
                title: title,
                description: description,
                image_url: imageUrl,
                metadata: metadata,
                tags: tags,
                campaign: campaign,
                channel: channel,
                feature: feature,
                stage: stage
            })
        });
        
        const data = await response.json();
        
        if (data.success) {
            showSuccess('Branch link built successfully');
            return data.link;
        } else {
            showError('Branch link building failed: ' + data.error);
        }
    } catch (error) {
        console.error('Branch link building failed:', error);
        showError('Branch link building failed: ' + error.message);
    }
}

/**
 * Build branch group link
 */
async function branchBuildGroup(groupData, title, description, imageUrl, metadata, tags, campaign, channel, feature, stage) {
    try {
        const response = await fetch('/branch_build_group', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                group_data: groupData,
                title: title,
                description: description,
                image_url: imageUrl,
                metadata: metadata,
                tags: tags,
                campaign: campaign,
                channel: channel,
                feature: feature,
                stage: stage
            })
        });
        
        const data = await response.json();
        
        if (data.success) {
            showSuccess('Branch group link built successfully');
            return data.link;
        } else {
            showError('Branch group link building failed: ' + data.error);
        }
    } catch (error) {
        console.error('Branch group link building failed:', error);
        showError('Branch group link building failed: ' + error.message);
    }
}

// ============================================================================
// UTILITY FUNCTIONS
// ============================================================================

/**
 * Chunkify array into smaller chunks
 */
function chunkify(array, chunkSize) {
    const chunks = [];
    for (let i = 0; i < array.length; i += chunkSize) {
        chunks.push(array.slice(i, i + chunkSize));
    }
    return chunks;
}

/**
 * Auto post content
 */
async function autopost(contentData, scheduleData) {
    try {
        const response = await fetch('/autopost', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                content: contentData,
                schedule: scheduleData
            })
        });
        
        const data = await response.json();
        
        if (data.success) {
            showSuccess('Auto post scheduled successfully');
            return data.post_id;
        } else {
            showError('Auto post scheduling failed: ' + data.error);
        }
    } catch (error) {
        console.error('Auto post scheduling failed:', error);
        showError('Auto post scheduling failed: ' + error.message);
    }
}

/**
 * Multi uploader
 */
async function multiUploader(files, uploadType, options) {
    try {
        const formData = new FormData();
        
        // Add files to form data
        files.forEach((file, index) => {
            formData.append(`file_${index}`, file);
        });
        
        // Add upload type and options
        formData.append('upload_type', uploadType);
        formData.append('options', JSON.stringify(options));
        
        const response = await fetch('/multi_upload', {
            method: 'POST',
            body: formData
        });
        
        const data = await response.json();
        
        if (data.success) {
            showSuccess('Files uploaded successfully');
            return data.upload_ids;
        } else {
            showError('Multi upload failed: ' + data.error);
        }
    } catch (error) {
        console.error('Multi upload failed:', error);
        showError('Multi upload failed: ' + error.message);
    }
}

// ============================================================================
// UID GRABBING FUNCTIONS
// ============================================================================

/**
 * Grab recommend UID
 */
async function grabRecommendUid() {
    try {
        const response = await fetch('/grabrecommend', {
            method: 'GET'
        });
        
        const data = await response.json();
        
        if (data.success) {
            displayRecommendUids(data.uids);
        } else {
            showError('Failed to grab recommend UIDs: ' + data.error);
        }
    } catch (error) {
        console.error('Grab recommend UID failed:', error);
        showError('Grab recommend UID failed: ' + error.message);
    }
}

/**
 * Display recommend UIDs
 */
function displayRecommendUids(uids) {
    const container = $('#recommendUidsContainer');
    container.empty();
    
    uids.forEach(uid => {
        const uidElement = $(`
            <div class="uid-item" data-uid="${uid.id}">
                <span class="uid-username">${uid.username}</span>
                <span class="uid-followers">${uid.followers_count}</span>
                <button class="btn btn-sm btn-primary select-uid" data-uid="${uid.id}">Select</button>
            </div>
        `);
        container.append(uidElement);
    });
}

/**
 * Clone profiler
 */
async function cloneProfiler(targetUserId) {
    try {
        const response = await fetch('/clonethreadprofile', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ target_user_id: targetUserId })
        });
        
        const data = await response.json();
        
        if (data.success) {
            showSuccess('Profile cloned successfully');
            return data.profile_data;
        } else {
            showError('Profile cloning failed: ' + data.error);
        }
    } catch (error) {
        console.error('Profile cloning failed:', error);
        showError('Profile cloning failed: ' + error.message);
    }
}

/**
 * Comment IDs
 */
async function commentIds(postId, commentText) {
    try {
        const response = await fetch('/commentthreads', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                post_id: postId,
                comment: commentText
            })
        });
        
        const data = await response.json();
        
        if (data.success) {
            showSuccess('Comment posted successfully');
        } else {
            showError('Comment posting failed: ' + data.error);
        }
    } catch (error) {
        console.error('Comment posting failed:', error);
        showError('Comment posting failed: ' + error.message);
    }
}

/**
 * Filter UID
 */
async function filterUid(filterCriteria) {
    try {
        const response = await fetch('/filter', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(filterCriteria)
        });
        
        const data = await response.json();
        
        if (data.success) {
            displayFilteredUids(data.uids);
        } else {
            showError('UID filtering failed: ' + data.error);
        }
    } catch (error) {
        console.error('UID filtering failed:', error);
        showError('UID filtering failed: ' + error.message);
    }
}

/**
 * Display filtered UIDs
 */
function displayFilteredUids(uids) {
    const container = $('#filteredUidsContainer');
    container.empty();
    
    uids.forEach(uid => {
        const uidElement = $(`
            <div class="filtered-uid-item" data-uid="${uid.id}">
                <span class="uid-username">${uid.username}</span>
                <span class="uid-score">${uid.score}</span>
                <button class="btn btn-sm btn-primary select-filtered-uid" data-uid="${uid.id}">Select</button>
            </div>
        `);
        container.append(uidElement);
    });
}

/**
 * Deep link
 */
async function deeplink(linkData, platform, action, metadata) {
    try {
        const response = await fetch('/deeplink', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                link_data: linkData,
                platform: platform,
                action: action,
                metadata: metadata
            })
        });
        
        const data = await response.json();
        
        if (data.success) {
            showSuccess('Deep link created successfully');
            return data.link;
        } else {
            showError('Deep link creation failed: ' + data.error);
        }
    } catch (error) {
        console.error('Deep link creation failed:', error);
        showError('Deep link creation failed: ' + error.message);
    }
}

/**
 * Create short linked
 */
async function createShortLinked(androidData) {
    try {
        const response = await fetch('/biolink', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/x-www-form-urlencoded'
            },
            body: new URLSearchParams({
                android: androidData
            })
        });
        
        if (response.ok) {
            const data = await response.json();
            return data;
        } else {
            $(".threads_env").text("Gagal Gawe Link");
        }
    } catch (error) {
        console.error('Short link creation failed:', error);
        return error;
    }
}

// ============================================================================
// UI HELPER FUNCTIONS
// ============================================================================

/**
 * Show success message
 */
function showSuccess(message) {
    const alertHtml = `
        <div class="alert alert-success alert-dismissible fade show" role="alert">
            ${message}
            <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
        </div>
    `;
    $('#alertContainer').html(alertHtml);
    
    // Auto-hide after 5 seconds
    setTimeout(() => {
        $('.alert-success').fadeOut();
    }, 5000);
}

/**
 * Show error message
 */
function showError(message) {
    const alertHtml = `
        <div class="alert alert-danger alert-dismissible fade show" role="alert">
            ${message}
            <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
        </div>
    `;
    $('#alertContainer').html(alertHtml);
    
    // Auto-hide after 8 seconds
    setTimeout(() => {
        $('.alert-danger').fadeOut();
    }, 8000);
}

/**
 * Show loading state
 */
function showLoading(element, text = 'Loading...') {
    const originalText = $(element).text();
    $(element).data('original-text', originalText);
    $(element).html(`<span class="spinner-border spinner-border-sm"></span> ${text}`);
    $(element).prop('disabled', true);
}

/**
 * Hide loading state
 */
function hideLoading(element) {
    const originalText = $(element).data('original-text');
    $(element).text(originalText);
    $(element).prop('disabled', false);
}

// ============================================================================
// EVENT LISTENERS
// ============================================================================

// Document ready
$(document).ready(function() {
    console.log('Logger V3 Application Initialized');
    
    // Initialize tooltips
    $('[data-bs-toggle="tooltip"]').tooltip();
    
    // Initialize popovers
    $('[data-bs-toggle="popover"]').popover();
    
    // Copy to clipboard handlers
    $(document).on('click', '.btn-copy', function() {
        const url = $(this).data('url');
        copyToClipboard(url, this);
    });
    
    // Delete handlers
    $(document).on('click', '.delete-content', function() {
        const contentId = $(this).data('id');
        if (confirm('Are you sure you want to delete this content?')) {
            deleteContent(contentId);
        }
    });
    
    // Select handlers
    $(document).on('click', '.select-uid', function() {
        const uid = $(this).data('uid');
        selectUid(uid);
    });
    
    // Bind account handlers
    $(document).on('click', '.bind-account', function() {
        const accountId = $(this).data('id');
        bindAccount(accountId);
    });
});

/**
 * Delete content
 */
function deleteContent(contentId) {
    $.ajax({
        url: '/delete_content',
        type: 'POST',
        data: { content_id: contentId },
        success: function(response) {
            if (response.success) {
                showSuccess('Content deleted successfully');
                // Remove from UI
                $(`[data-content-id="${contentId}"]`).remove();
            } else {
                showError('Content deletion failed: ' + response.error);
            }
        },
        error: function(xhr, status, error) {
            showError('Content deletion failed: ' + error);
        }
    });
}

/**
 * Select UID
 */
function selectUid(uid) {
    $('#selectedUid').val(uid);
    showSuccess('UID selected: ' + uid);
}

/**
 * Bind account
 */
function bindAccount(accountId) {
    $.ajax({
        url: '/bind_account',
        type: 'POST',
        data: { account_id: accountId },
        success: function(response) {
            if (response.success) {
                showSuccess('Account bound successfully');
                // Close modal
                $('.modal').modal('hide');
            } else {
                showError('Account binding failed: ' + response.error);
            }
        },
        error: function(xhr, status, error) {
            showError('Account binding failed: ' + error);
        }
    });
}

// ============================================================================
// END OF MAIN.JS
// ============================================================================
